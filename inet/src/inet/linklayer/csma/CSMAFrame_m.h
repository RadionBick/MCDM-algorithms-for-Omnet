//
// Generated file, do not edit! Created by nedtool 4.6 from inet/linklayer/csma/CSMAFrame.msg.
//

#ifndef _INET_CSMAFRAME_M_H_
#define _INET_CSMAFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

// cplusplus {{
    #include "inet/linklayer/base/MACFrameBase_m.h"
// }}


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/csma/CSMAFrame.msg:36</tt> by nedtool.
 * <pre>
 * //
 * // A CSMA mac packet format definition
 * //
 * // @author Daniel Willkomm
 * //
 * packet CSMAFrame extends MACFrameBase
 * {
 *     long sequenceId; // Sequence Number to detect duplicate messages
 * }
 * </pre>
 */
class INET_API CSMAFrame : public ::inet::MACFrameBase
{
  protected:
    long sequenceId_var;

  private:
    void copy(const CSMAFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CSMAFrame&);

  public:
    CSMAFrame(const char *name=NULL, int kind=0);
    CSMAFrame(const CSMAFrame& other);
    virtual ~CSMAFrame();
    CSMAFrame& operator=(const CSMAFrame& other);
    virtual CSMAFrame *dup() const {return new CSMAFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual long getSequenceId() const;
    virtual void setSequenceId(long sequenceId);
};

inline void doPacking(cCommBuffer *b, CSMAFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CSMAFrame& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef _INET_CSMAFRAME_M_H_

