//
// Generated file, do not edit! Created by nedtool 4.6 from inet/linklayer/ideal/IdealMacFrame.msg.
//

#ifndef _INET_IDEALMACFRAME_M_H_
#define _INET_IDEALMACFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

// cplusplus {{
#include "inet/common/INETDefs.h"
#include "inet/linklayer/common/MACAddress.h"
// }}


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ideal/IdealMacFrame.msg:34</tt> by nedtool.
 * <pre>
 * //
 * // Packet for ~IdealMac. Packet size is configurable
 * // in the MAC layer. 
 * //
 * packet IdealMacFrame
 * {
 *     MACAddress src;     // source address
 *     MACAddress dest;    // destination address
 *     int srcModuleId;    // technical data, uses instead of sending back an ACK packet
 * }
 * </pre>
 */
class INET_API IdealMacFrame : public ::cPacket
{
  protected:
    MACAddress src_var;
    MACAddress dest_var;
    int srcModuleId_var;

  private:
    void copy(const IdealMacFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IdealMacFrame&);

  public:
    IdealMacFrame(const char *name=NULL, int kind=0);
    IdealMacFrame(const IdealMacFrame& other);
    virtual ~IdealMacFrame();
    IdealMacFrame& operator=(const IdealMacFrame& other);
    virtual IdealMacFrame *dup() const {return new IdealMacFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getSrc();
    virtual const MACAddress& getSrc() const {return const_cast<IdealMacFrame*>(this)->getSrc();}
    virtual void setSrc(const MACAddress& src);
    virtual MACAddress& getDest();
    virtual const MACAddress& getDest() const {return const_cast<IdealMacFrame*>(this)->getDest();}
    virtual void setDest(const MACAddress& dest);
    virtual int getSrcModuleId() const;
    virtual void setSrcModuleId(int srcModuleId);
};

inline void doPacking(cCommBuffer *b, IdealMacFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IdealMacFrame& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef _INET_IDEALMACFRAME_M_H_

