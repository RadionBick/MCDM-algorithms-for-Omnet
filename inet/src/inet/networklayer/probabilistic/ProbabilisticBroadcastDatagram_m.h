//
// Generated file, do not edit! Created by nedtool 4.6 from inet/networklayer/probabilistic/ProbabilisticBroadcastDatagram.msg.
//

#ifndef _INET_PROBABILISTICBROADCASTDATAGRAM_M_H_
#define _INET_PROBABILISTICBROADCASTDATAGRAM_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

// cplusplus {{
   #include "inet/networklayer/base/NetworkDatagramBase_m.h"
// }}


namespace inet {

/**
 * Class generated from <tt>inet/networklayer/probabilistic/ProbabilisticBroadcastDatagram.msg:28</tt> by nedtool.
 * <pre>
 * packet ProbabilisticBroadcastDatagram extends NetworkDatagramBase
 * {
 *     @customize(true);
 * 
 *     long id;    // Unique message ID ~ f(node address, unique number in node scope).
 *     int nbHops;
 *     int transportProtocol = -1;
 *     simtime_t appTtl;   // Message time-to-live set by application.
 *     L3Address initialSrcAddr;
 *     L3Address finalDestAddr;
 * }
 * </pre>
 *
 * ProbabilisticBroadcastDatagram_Base is only useful if it gets subclassed, and ProbabilisticBroadcastDatagram is derived from it.
 * The minimum code to be written for ProbabilisticBroadcastDatagram is the following:
 *
 * <pre>
 * class INET_API ProbabilisticBroadcastDatagram : public ProbabilisticBroadcastDatagram_Base
 * {
 *   private:
 *     void copy(const ProbabilisticBroadcastDatagram& other) { ... }

 *   public:
 *     ProbabilisticBroadcastDatagram(const char *name=NULL, int kind=0) : ProbabilisticBroadcastDatagram_Base(name,kind) {}
 *     ProbabilisticBroadcastDatagram(const ProbabilisticBroadcastDatagram& other) : ProbabilisticBroadcastDatagram_Base(other) {copy(other);}
 *     ProbabilisticBroadcastDatagram& operator=(const ProbabilisticBroadcastDatagram& other) {if (this==&other) return *this; ProbabilisticBroadcastDatagram_Base::operator=(other); copy(other); return *this;}
 *     virtual ProbabilisticBroadcastDatagram *dup() const {return new ProbabilisticBroadcastDatagram(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from ProbabilisticBroadcastDatagram_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(ProbabilisticBroadcastDatagram);
 * </pre>
 */
class INET_API ProbabilisticBroadcastDatagram_Base : public ::inet::NetworkDatagramBase
{
  protected:
    long id_var;
    int nbHops_var;
    int transportProtocol_var;
    simtime_t appTtl_var;
    L3Address initialSrcAddr_var;
    L3Address finalDestAddr_var;

  private:
    void copy(const ProbabilisticBroadcastDatagram_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ProbabilisticBroadcastDatagram_Base&);
    // make constructors protected to avoid instantiation
    ProbabilisticBroadcastDatagram_Base(const char *name=NULL, int kind=0);
    ProbabilisticBroadcastDatagram_Base(const ProbabilisticBroadcastDatagram_Base& other);
    // make assignment operator protected to force the user override it
    ProbabilisticBroadcastDatagram_Base& operator=(const ProbabilisticBroadcastDatagram_Base& other);

  public:
    virtual ~ProbabilisticBroadcastDatagram_Base();
    virtual ProbabilisticBroadcastDatagram_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class ProbabilisticBroadcastDatagram");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual long getId() const;
    virtual void setId(long id);
    virtual int getNbHops() const;
    virtual void setNbHops(int nbHops);
    virtual int getTransportProtocol() const;
    virtual void setTransportProtocol(int transportProtocol);
    virtual simtime_t getAppTtl() const;
    virtual void setAppTtl(simtime_t appTtl);
    virtual L3Address& getInitialSrcAddr();
    virtual const L3Address& getInitialSrcAddr() const {return const_cast<ProbabilisticBroadcastDatagram_Base*>(this)->getInitialSrcAddr();}
    virtual void setInitialSrcAddr(const L3Address& initialSrcAddr);
    virtual L3Address& getFinalDestAddr();
    virtual const L3Address& getFinalDestAddr() const {return const_cast<ProbabilisticBroadcastDatagram_Base*>(this)->getFinalDestAddr();}
    virtual void setFinalDestAddr(const L3Address& finalDestAddr);
};

} // namespace inet

#endif // ifndef _INET_PROBABILISTICBROADCASTDATAGRAM_M_H_

