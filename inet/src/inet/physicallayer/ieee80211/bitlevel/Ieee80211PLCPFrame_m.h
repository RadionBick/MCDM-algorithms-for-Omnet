//
// Generated file, do not edit! Created by nedtool 4.6 from inet/physicallayer/ieee80211/bitlevel/Ieee80211PLCPFrame.msg.
//

#ifndef _INET__PHYSICALLAYER_IEEE80211PLCPFRAME_M_H_
#define _INET__PHYSICALLAYER_IEEE80211PLCPFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace physicallayer {

/**
 * Enum generated from <tt>inet/physicallayer/ieee80211/bitlevel/Ieee80211PLCPFrame.msg:21</tt> by nedtool.
 * <pre>
 * enum Ieee80211PLCPType
 * {
 * 
 *     OFDM = 0;
 *     DSSS = 1;
 *     Infrared = 2;
 *     FHSS = 3;
 *     HRDSSS = 4;
 *     ERP = 5;
 *     HT = 6;
 * }
 * </pre>
 */
enum Ieee80211PLCPType {
    OFDM = 0,
    DSSS = 1,
    Infrared = 2,
    FHSS = 3,
    HRDSSS = 4,
    ERP = 5,
    HT = 6
};

/**
 * Class generated from <tt>inet/physicallayer/ieee80211/bitlevel/Ieee80211PLCPFrame.msg:32</tt> by nedtool.
 * <pre>
 * packet Ieee80211PLCPFrame
 * {
 *     short type @enum(Ieee80211PLCPType);
 * }
 * </pre>
 */
class INET_API Ieee80211PLCPFrame : public ::cPacket
{
  protected:
    short type_var;

  private:
    void copy(const Ieee80211PLCPFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211PLCPFrame&);

  public:
    Ieee80211PLCPFrame(const char *name=NULL, int kind=0);
    Ieee80211PLCPFrame(const Ieee80211PLCPFrame& other);
    virtual ~Ieee80211PLCPFrame();
    Ieee80211PLCPFrame& operator=(const Ieee80211PLCPFrame& other);
    virtual Ieee80211PLCPFrame *dup() const {return new Ieee80211PLCPFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getType() const;
    virtual void setType(short type);
};

inline void doPacking(cCommBuffer *b, Ieee80211PLCPFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Ieee80211PLCPFrame& obj) {obj.parsimUnpack(b);}

} // namespace physicallayer
} // namespace inet

#endif // ifndef _INET__PHYSICALLAYER_IEEE80211PLCPFRAME_M_H_

